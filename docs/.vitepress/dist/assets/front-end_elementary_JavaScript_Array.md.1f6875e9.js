import{_ as e,c as r,o as a,Q as t}from"./chunks/framework.e7dbb61d.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/elementary/JavaScript/Array.md"}'),o={name:"front-end/elementary/JavaScript/Array.md"},p=t('<h2 id="properties" tabindex="-1">properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;properties&quot;">​</a></h2><h3 id="length" tabindex="-1">length <a class="header-anchor" href="#length" aria-label="Permalink to &quot;length&quot;">​</a></h3><blockquote><p>return the number of elements in that array</p></blockquote><h2 id="methods" tabindex="-1">methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;methods&quot;">​</a></h2><h3 id="array-prototype-slice-start-end" tabindex="-1">Array.prototype.slice(start, end) <a class="header-anchor" href="#array-prototype-slice-start-end" aria-label="Permalink to &quot;Array.prototype.slice(start, end)&quot;">​</a></h3><blockquote><p>return: <em>A new array</em> containing the extracted elements.</p></blockquote><h3 id="array-prototype-splice-index-deletecount-alternative" tabindex="-1">Array.prototype.splice(index, deletecount, alternative) <a class="header-anchor" href="#array-prototype-splice-index-deletecount-alternative" aria-label="Permalink to &quot;Array.prototype.splice(index, deletecount, alternative)&quot;">​</a></h3><blockquote><p>return: <em>An array</em> containing the deleted elements.</p></blockquote><h3 id="array-prototype-pop" tabindex="-1">Array.prototype.pop() <a class="header-anchor" href="#array-prototype-pop" aria-label="Permalink to &quot;Array.prototype.pop()&quot;">​</a></h3><blockquote><p>return: <em>An array</em> that removes the last element</p></blockquote><h3 id="array-prototype-map" tabindex="-1">Array.prototype.map() <a class="header-anchor" href="#array-prototype-map" aria-label="Permalink to &quot;Array.prototype.map()&quot;">​</a></h3><h3 id="array-prototype-indexof" tabindex="-1">Array.prototype.indexOf() <a class="header-anchor" href="#array-prototype-indexof" aria-label="Permalink to &quot;Array.prototype.indexOf()&quot;">​</a></h3><p>判断传入的是数组的第几个元素</p><blockquote><p>返回索引数</p></blockquote><h3 id="array-prototype-filter" tabindex="-1">Array.prototype.filter() <a class="header-anchor" href="#array-prototype-filter" aria-label="Permalink to &quot;Array.prototype.filter()&quot;">​</a></h3><p>过滤数组，返回条件为真的数组元素 我所用的到的场景，求两个数组的交集 不改变原数组</p><h3 id="array-prototype-foreach" tabindex="-1">Array.prototype.forEach() <a class="header-anchor" href="#array-prototype-foreach" aria-label="Permalink to &quot;Array.prototype.forEach()&quot;">​</a></h3><p>遍历数组，没有返回值，我一般用来打印</p><h3 id="array-prototype-shift" tabindex="-1">Array.prototype.shift() <a class="header-anchor" href="#array-prototype-shift" aria-label="Permalink to &quot;Array.prototype.shift()&quot;">​</a></h3>',19),n=[p];function i(l,h,y,c,s,d){return a(),r("div",null,n)}const f=e(o,[["render",i]]);export{m as __pageData,f as default};
